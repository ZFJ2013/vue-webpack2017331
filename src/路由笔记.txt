响应路由参数的变化

提醒一下，当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。

复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：

const User = {
  template: '...',
  watch: {
    '$route' (to, from) {
      // 对路由变化作出响应...
    }
  }
}


匹配优先级

有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。


嵌套路由和route-view嵌套的写法:

const User = {
  template:
    <div class="user">
      <h2>User {{ $route.params.id }}</h2>
      <router-view></router-view>
    </div>
}

const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 <router-view> 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 <router-view> 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
  ]
})


// 想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 
// 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。
router.push(...)
<router-link :to="...">

//跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，
//而是跟它的方法名一样 —— 替换掉当前的history 记录。
router.replace(...)
<router-link :to="..." replace>

//这个方法的参数是一个整数，意思是在 history 记录中向前或者
//后退多少步，类似 window.history.go(n)。
router.go(n)

如果一个页面上需要同时展示多个同级视图要这样写:
<router-view class="view one"></router-view>
<router-view class="view two" name="a"></router-view>
<router-view class="view three" name="b"></router-view>

const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})

根据route-view标签上的name属性来指定渲染的组件,default指定的组件会渲染到没有指定name的route-view中。


重定向

const router = new VueRouter({
  routes: [
    { path: '/a', redirect: '/b' },
    // 也可以是一个命名的路由
    { path: '/b', redirect: { name: 'foo' }},
    // 也可以是一个方法
    { path: '/c', redirect: to => {
      // 方法接收 目标路由 作为参数
      // return 重定向的 字符串路径/路径对象
    }}
  ]
})

别名

const router = new VueRouter({
  routes: [
    { path: '/a', component: A, alias: '/b' }
  ]
})

访问'/b'会跳转到'/a',但URL会保持为'/b'



导航钩子

主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的

全局钩子

你可以使用 router.beforeEach 注册一个全局的 before 钩子：

const router = new VueRouter({ ... })
/**
* to: Route: 即将要进入的目标 路由对象
* from: Route: 当前导航正要离开的路由
* next: Function: 确保要调用 next 方法，否则钩子就不会被 resolved
       next(): 进行管道中的下一个钩子
       next(false): 中断当前的导航
       next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址
**/
router.beforeEach((to, from, next) => {
  // ...
})

全局的after钩子:

router.afterEach(route => {
  // ...
})


某个路由独享的钩子

const router = new VueRouter({
  routes: [
    {
      path: '/foo',
      component: Foo,
      beforeEnter: (to, from, next) => {
        // ...
      }
    }
  ]
})


组件内的钩子

const Foo = {
  template: `...`,
  beforeRouteEnter (to, from, next) {
    // 在渲染该组件的对应路由被 confirm 前调用
    // 不！能！获取组件实例 `this`
    // 因为当钩子执行前，组件实例还没被创建
    // 但是可以给next方法一个回调来访问该组件实例
    next(vm => {
       // 通过 `vm` 访问组件实例
    })
  },
  beforeRouteUpdate (to, from, next) {
    // 2.2 才有的功能
    // 在当前路由改变，但是该组件被复用时调用
    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 可以访问组件实例 `this`
  },
  beforeRouteLeave (to, from, next) {
    // 导航离开该组件的对应路由时调用,这个 leave 钩子通常用来禁止用户在还未保存修改前突
    // 然离开。可以通过 next(false) 来取消导航。
    // 可以访问组件实例 `this`
  }
}